{
  "name": "aibos-accounting-saas",
  "version": "1.0.0",
  "description": "Enterprise-grade accounting SaaS with multi-tenant architecture",
  "private": true,
  "workspaces": [
    "apps/*",
    "packages/*"
  ],
  "scripts": {
    "dev": "turbo run dev --parallel",
    "dev:fast": "turbo run dev --parallel --filter=./apps/*",
    "dev:apps": "turbo run dev --filter=./apps/* --parallel",
    "dev:packages": "turbo run dev --filter=./packages/* --parallel",
    "build": "turbo run build",
    "build:fast": "turbo run build --parallel --filter=./apps/*",
    "build:deps": "turbo run build --filter=./packages/*",
    "build:apps": "turbo run build --filter=./apps/*",
    "build:watch": "turbo run build:watch --parallel",
    "test": "turbo run test",
    "test:watch": "turbo run test:watch --parallel",
    "test:coverage": "turbo run test:coverage",
    "lint": "turbo run lint",
    "lint:fix": "turbo run lint:fix",
    "type-check": "turbo run type-check",
    "clean": "turbo run clean && rimraf node_modules && rimraf **/node_modules && rimraf **/.next",
    "clean:cache": "turbo run clean && rimraf .turbo",
    "validate": "turbo run validate",
    "prepare": "turbo run prepare",
    "db:generate": "turbo run db:generate",
    "db:push": "turbo run db:push",
    "db:reset": "turbo run db:reset",
    "db:seed": "turbo run db:seed",
    "check-deps": "turbo run build --dry-run",
    "check:deps": "turbo run check:deps",
    "install:deps": "pnpm install && pnpm run build:deps",
    "dev:full": "npm run build:deps && npm run dev",
    "start": "turbo run start --parallel",
    "format": "turbo run format",
    "format:check": "turbo run format:check",
    "docs:dev": "turbo run docs:dev --parallel",
    "docs:build": "turbo run docs:build",
    "storybook": "turbo run storybook --parallel",
    "storybook:build": "turbo run storybook:build",
    "e2e": "turbo run e2e",
    "e2e:dev": "turbo run e2e:dev --parallel",
    "docker:build": "turbo run docker:build",
    "docker:dev": "turbo run docker:dev --parallel",
    "deploy:staging": "turbo run deploy:staging",
    "deploy:production": "turbo run deploy:production",
    "analyze": "turbo run analyze",
    "bundle": "turbo run bundle",
    "restructure:status": "node scripts/restructure-helper.js",
    "validate:ledger": "powershell -ExecutionPolicy Bypass -File scripts/validate-ledger-sdk.ps1",
    "validate:ledger:skip-build": "powershell -ExecutionPolicy Bypass -File scripts/validate-ledger-sdk.ps1 -SkipBuild",
    "ps:build": "powershell -ExecutionPolicy Bypass -File scripts/powershell-helper.ps1 build",
    "ps:test": "powershell -ExecutionPolicy Bypass -File scripts/powershell-helper.ps1 test",
    "ps:status": "powershell -ExecutionPolicy Bypass -File scripts/powershell-helper.ps1 status",
    "ps:help": "powershell -ExecutionPolicy Bypass -File scripts/powershell-helper.ps1 help",
    "os:check": "node scripts/ai-bos-cli.js check",
    "os:build": "node scripts/ai-bos-cli.js build",
    "os:test": "node scripts/ai-bos-cli.js test",
    "os:lint": "node scripts/ai-bos-cli.js lint",
    "os:validate": "node scripts/ai-bos-cli.js validate",
    "os:status": "node scripts/ai-bos-cli.js status",
    "os:doctor": "node scripts/ai-bos-cli.js doctor",
    "os:update": "node scripts/ai-bos-cli.js update",
    "os:help": "node scripts/ai-bos-cli.js help",
    "turbo:optimize": "node scripts/turbo-speed-optimizer.js",
    "turbo:analyze": "turbo run build --dry-run",
    "turbo:cache:clear": "turbo run clean && rimraf .turbo",
    "governance:validate": "turbo run validate --filter=DataGovernance",
    "governance:compliance": "turbo run compliance:check --filter=DataGovernance",
    "integration:test": "turbo run test --filter=@aibos/integration",
    "ai-bos:readiness": "npm run governance:validate && npm run integration:test && npm run os:validate",
    "deploy:governance-schema": "psql $DATABASE_URL -f packages/database/governance-schema.sql",
    "deploy:metadata": "cd metadataRegistry && npm run build && npm run deploy",
    "deploy:governance": "cd DataGovernance && npm run build && npm run deploy",
    "deploy:database": "cd database && npm run migrate",
    "go-live": "npm run deploy:metadata && npm run deploy:governance",
    "test:integration": "npm run test:governance-integration",
    "test:governance-integration": "jest packages/database/__tests__/governance-integration.test.ts",
    "localhost:setup": "npm run go-live && npm run dev",
    "localhost:test-ui": "npm run localhost:setup",
    "generate:keys": "node scripts/generate-encryption-key.js",
    "setup:env": "npm run generate:keys && echo 'Please copy the generated keys to your .env.local file'"
  }
}
