'use client';

import React, { useState, useEffect } from 'react';
import { 
  ReportDesignerService, 
  ReportTemplate, 
  ReportFormat, 
  FieldType,
  type ReportSettings,
  type ReportField,
  type ReportLayout
} from '@aibos/ledger-sdk';
import { 
  Plus, 
  Save, 
  Download, 
  Eye, 
  Edit, 
  Trash2, 
  Share2, 
  Settings,
  FileText,
  BarChart3,
  Table,
  Grid3X3,
  Calendar,
  Users,
  DollarSign,
  Image,
  File,
  Mail,
  Phone,
  Globe,
  CheckSquare,
  Filter,
  SortAsc,
  Group,
  Calculator,
  Clock,
  Star,
  MoreVertical,
  ChevronDown,
  ChevronRight,
  Upload,
  Palette,
  Type,
  Layout,
  Zap
} from 'lucide-react';

interface ReportDesignerDashboardProps {
  organizationId: string;
  supabaseUrl: string;
  supabaseKey: string;
}

export default function ReportDesignerDashboard({
  organizationId,
  supabaseUrl,
  supabaseKey
}: ReportDesignerDashboardProps) {
  const [reportService] = useState(() => new ReportDesignerService(supabaseUrl, supabaseKey));
  
  // State management
  const [activeTab, setActiveTab] = useState<'designer' | 'templates' | 'reports' | 'analytics'>('designer');
  const [currentReport, setCurrentReport] = useState<ReportSettings | null>(null);
  const [availableFields, setAvailableFields] = useState<ReportField[]>([]);
  const [templates, setTemplates] = useState<any[]>([]);
  const [reports, setReports] = useState<ReportSettings[]>([]);
  const [loading, setLoading] = useState(false);
  
  // Designer state
  const [selectedTemplate, setSelectedTemplate] = useState<ReportTemplate>(ReportTemplate.SIMPLE_TABLE);
  const [selectedFields, setSelectedFields] = useState<ReportField[]>([]);
  const [reportName, setReportName] = useState('');
  const [reportDescription, setReportDescription] = useState('');
  const [showPreview, setShowPreview] = useState(false);
  
  // Modal states
  const [showSaveModal, setShowSaveModal] = useState(false);
  const [showTemplateModal, setShowTemplateModal] = useState(false);
  const [showFieldModal, setShowFieldModal] = useState(false);
  const [showLayoutModal, setShowLayoutModal] = useState(false);

  useEffect(() => {
    loadData();
  }, [activeTab]);

  const loadData = async () => {
    setLoading(true);
    try {
      switch (activeTab) {
        case 'designer':
          const fields = await reportService.getAvailableFields(organizationId);
          setAvailableFields(fields);
          const templateList = await reportService.getReportTemplates();
          setTemplates(templateList);
          break;
        case 'reports':
          const reportList = await reportService.listReports(organizationId, 'current-user');
          setReports(reportList);
          break;
      }
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleTemplateSelect = (template: ReportTemplate) => {
    setSelectedTemplate(template);
    const templateData = templates.find(t => t.name === template);
    if (templateData) {
      setSelectedFields(templateData.default_fields || []);
    }
  };

  const handleFieldAdd = (field: ReportField) => {
    if (!selectedFields.find(f => f.field_name === field.field_name)) {
      setSelectedFields([...selectedFields, { ...field, display_order: selectedFields.length + 1 }]);
    }
  };

  const handleFieldRemove = (fieldName: string) => {
    setSelectedFields(selectedFields.filter(f => f.field_name !== fieldName));
  };

  const handleFieldReorder = (fromIndex: number, toIndex: number) => {
    const newFields = [...selectedFields];
    const [movedField] = newFields.splice(fromIndex, 1);
    newFields.splice(toIndex, 0, movedField);
    setSelectedFields(newFields.map((field, index) => ({ ...field, display_order: index + 1 })));
  };

  const handleSaveReport = async () => {
    try {
      const report: Partial<ReportSettings> = {
        name: reportName,
        description: reportDescription,
        organization_id: organizationId,
        created_by: 'current-user',
        layout: {
          template: selectedTemplate,
          header: { title: reportName },
          footer: { text: 'Generated by AIBOS', page_numbers: true },
          styling: {
            font_family: 'Arial',
            font_size: 12,
            primary_color: '#2563eb',
            secondary_color: '#64748b',
            border_style: 'solid',
            row_alternating_colors: true
          },
          page: {
            orientation: 'portrait',
            size: 'a4',
            margins: { top: 20, bottom: 20, left: 20, right: 20 }
          }
        },
        fields: selectedFields,
        permissions: {
          can_view: ['current-user'],
          can_edit: ['current-user'],
          can_delete: ['current-user'],
          can_share: []
        }
      };

      const savedReport = await reportService.createReport(report);
      setCurrentReport(savedReport);
      setShowSaveModal(false);
      loadData();
    } catch (error) {
      console.error('Error saving report:', error);
    }
  };

  const handleExecuteReport = async (reportId: string, format: ReportFormat) => {
    try {
      const execution = await reportService.executeReport(reportId, format, 'current-user');
      if (execution.file_url) {
        window.open(execution.file_url, '_blank');
      }
    } catch (error) {
      console.error('Error executing report:', error);
    }
  };

  const getFieldIcon = (fieldType: FieldType) => {
    switch (fieldType) {
      case FieldType.TEXT: return <Type className="w-4 h-4" />;
      case FieldType.NUMBER: return <Calculator className="w-4 h-4" />;
      case FieldType.CURRENCY: return <DollarSign className="w-4 h-4" />;
      case FieldType.DATE: return <Calendar className="w-4 h-4" />;
      case FieldType.BOOLEAN: return <CheckSquare className="w-4 h-4" />;
      case FieldType.IMAGE: return <Image className="w-4 h-4" />;
      case FieldType.FILE: return <File className="w-4 h-4" />;
      case FieldType.EMAIL: return <Mail className="w-4 h-4" />;
      case FieldType.PHONE: return <Phone className="w-4 h-4" />;
      case FieldType.URL: return <Globe className="w-4 h-4" />;
      default: return <FileText className="w-4 h-4" />;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                Report Designer
              </h1>
              <p className="text-gray-600">
                No-code report builder with dynamic field support
              </p>
            </div>
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setShowSaveModal(true)}
                className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Save className="w-4 h-4" />
                <span>Save Report</span>
              </button>
              <button
                onClick={() => setShowPreview(true)}
                className="flex items-center space-x-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
              >
                <Eye className="w-4 h-4" />
                <span>Preview</span>
              </button>
            </div>
          </div>
        </div>

        {/* Tabs */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 mb-6">
          <div className="flex border-b border-gray-200">
            {[
              { id: 'designer', label: 'Designer', icon: Layout },
              { id: 'templates', label: 'Templates', icon: FileText },
              { id: 'reports', label: 'My Reports', icon: BarChart3 },
              { id: 'analytics', label: 'Analytics', icon: Zap }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as any)}
                className={`flex items-center space-x-2 px-6 py-4 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <tab.icon className="w-4 h-4" />
                <span>{tab.label}</span>
              </button>
            ))}
          </div>
        </div>

        {/* Content */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          {activeTab === 'designer' && (
            <ReportDesignerTab
              selectedTemplate={selectedTemplate}
              onTemplateSelect={handleTemplateSelect}
              availableFields={availableFields}
              selectedFields={selectedFields}
              onFieldAdd={handleFieldAdd}
              onFieldRemove={handleFieldRemove}
              onFieldReorder={handleFieldReorder}
              reportName={reportName}
              setReportName={setReportName}
              reportDescription={reportDescription}
              setReportDescription={setReportDescription}
              templates={templates}
              loading={loading}
              getFieldIcon={getFieldIcon}
            />
          )}

          {activeTab === 'templates' && (
            <TemplatesTab
              templates={templates}
              onTemplateSelect={handleTemplateSelect}
              loading={loading}
            />
          )}

          {activeTab === 'reports' && (
            <ReportsTab
              reports={reports}
              onExecuteReport={handleExecuteReport}
              loading={loading}
            />
          )}

          {activeTab === 'analytics' && (
            <AnalyticsTab
              organizationId={organizationId}
              reportService={reportService}
            />
          )}
        </div>
      </div>

      {/* Save Report Modal */}
      {showSaveModal && (
        <SaveReportModal
          reportName={reportName}
          setReportName={setReportName}
          reportDescription={reportDescription}
          setReportDescription={setReportDescription}
          onSave={handleSaveReport}
          onClose={() => setShowSaveModal(false)}
        />
      )}

      {/* Preview Modal */}
      {showPreview && (
        <PreviewModal
          report={{
            name: reportName,
            layout: {
              template: selectedTemplate,
              header: { title: reportName },
              footer: { text: 'Generated by AIBOS' }
            },
            fields: selectedFields
          }}
          onClose={() => setShowPreview(false)}
        />
      )}
    </div>
  );
}

// Report Designer Tab Component
function ReportDesignerTab({
  selectedTemplate,
  onTemplateSelect,
  availableFields,
  selectedFields,
  onFieldAdd,
  onFieldRemove,
  onFieldReorder,
  reportName,
  setReportName,
  reportDescription,
  setReportDescription,
  templates,
  loading,
  getFieldIcon
}: any) {
  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      {/* Left Panel - Template & Fields */}
      <div className="lg:col-span-1 space-y-6">
        {/* Template Selection */}
        <div className="bg-gray-50 rounded-lg p-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Choose Template</h3>
          <div className="grid grid-cols-2 gap-3">
            {templates.map((template: any) => (
              <button
                key={template.name}
                onClick={() => onTemplateSelect(template.name)}
                className={`p-3 rounded-lg border-2 transition-colors ${
                  selectedTemplate === template.name
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                <div className="text-sm font-medium text-gray-900">{template.display_name}</div>
                <div className="text-xs text-gray-500 mt-1">{template.description}</div>
              </button>
            ))}
          </div>
        </div>

        {/* Available Fields */}
        <div className="bg-gray-50 rounded-lg p-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Available Fields</h3>
          <div className="space-y-2 max-h-96 overflow-y-auto">
            {availableFields.map((field: ReportField) => (
              <div
                key={field.field_name}
                className="flex items-center justify-between p-2 bg-white rounded border hover:bg-gray-50 cursor-pointer"
                onClick={() => onFieldAdd(field)}
              >
                <div className="flex items-center space-x-2">
                  {getFieldIcon(field.data_type)}
                  <div>
                    <div className="text-sm font-medium text-gray-900">{field.label}</div>
                    <div className="text-xs text-gray-500">{field.field_name}</div>
                  </div>
                </div>
                <Plus className="w-4 h-4 text-gray-400" />
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Center Panel - Report Configuration */}
      <div className="lg:col-span-2 space-y-6">
        {/* Report Details */}
        <div className="bg-gray-50 rounded-lg p-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Report Details</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Report Name
              </label>
              <input
                type="text"
                value={reportName}
                onChange={(e) => setReportName(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Enter report name"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <input
                type="text"
                value={reportDescription}
                onChange={(e) => setReportDescription(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Enter description"
              />
            </div>
          </div>
        </div>

        {/* Selected Fields */}
        <div className="bg-gray-50 rounded-lg p-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Selected Fields</h3>
          {selectedFields.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <FileText className="w-12 h-12 mx-auto mb-4 text-gray-300" />
              <p>No fields selected. Choose fields from the left panel.</p>
            </div>
          ) : (
            <div className="space-y-2">
              {selectedFields.map((field: ReportField, index: number) => (
                <div
                  key={field.field_name}
                  className="flex items-center justify-between p-3 bg-white rounded border"
                >
                  <div className="flex items-center space-x-3">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-gray-500">#{index + 1}</span>
                      {getFieldIcon(field.data_type)}
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-900">{field.label}</div>
                      <div className="text-xs text-gray-500">{field.field_name}</div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => onFieldRemove(field.field_name)}
                      className="text-red-600 hover:text-red-800"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Layout Options */}
        <div className="bg-gray-50 rounded-lg p-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Layout Options</h3>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="w-16 h-16 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-2">
                <Table className="w-8 h-8 text-blue-600" />
              </div>
              <div className="text-sm font-medium text-gray-900">Table</div>
            </div>
            <div className="text-center">
              <div className="w-16 h-16 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-2">
                <BarChart3 className="w-8 h-8 text-green-600" />
              </div>
              <div className="text-sm font-medium text-gray-900">Chart</div>
            </div>
            <div className="text-center">
              <div className="w-16 h-16 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-2">
                <Grid3X3 className="w-8 h-8 text-purple-600" />
              </div>
              <div className="text-sm font-medium text-gray-900">Cards</div>
            </div>
            <div className="text-center">
              <div className="w-16 h-16 bg-orange-100 rounded-lg flex items-center justify-center mx-auto mb-2">
                <Layout className="w-8 h-8 text-orange-600" />
              </div>
              <div className="text-sm font-medium text-gray-900">Custom</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// Templates Tab Component
function TemplatesTab({ templates, onTemplateSelect, loading }: any) {
  return (
    <div>
      <h3 className="text-lg font-medium text-gray-900 mb-6">Report Templates</h3>
      
      {loading ? (
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {templates.map((template: any) => (
            <div key={template.name} className="border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow">
              <div className="flex items-center justify-between mb-4">
                <h4 className="text-lg font-medium text-gray-900">{template.display_name}</h4>
                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  {template.category}
                </span>
              </div>
              <p className="text-gray-600 mb-4">{template.description}</p>
              <div className="space-y-2 mb-4">
                <div className="text-sm text-gray-500">
                  <strong>Formats:</strong> {template.supported_formats.join(', ')}
                </div>
                <div className="text-sm text-gray-500">
                  <strong>Max Fields:</strong> {template.max_fields}
                </div>
              </div>
              <button
                onClick={() => onTemplateSelect(template.name)}
                className="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
              >
                Use Template
              </button>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

// Reports Tab Component
function ReportsTab({ reports, onExecuteReport, loading }: any) {
  return (
    <div>
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-medium text-gray-900">My Reports</h3>
        <button className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
          <Plus className="w-4 h-4" />
          <span>New Report</span>
        </button>
      </div>

      {loading ? (
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      ) : (
        <div className="space-y-4">
          {reports.map((report: ReportSettings) => (
            <div key={report.id} className="border border-gray-200 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <h4 className="text-lg font-medium text-gray-900">{report.name}</h4>
                  <p className="text-gray-600">{report.description}</p>
                  <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                    <span>Created: {new Date(report.created_at).toLocaleDateString()}</span>
                    <span>Used: {report.usage_count} times</span>
                    <span>Fields: {report.fields.length}</span>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => onExecuteReport(report.id, ReportFormat.PDF)}
                    className="text-blue-600 hover:text-blue-800"
                    title="Export as PDF"
                  >
                    <Download className="w-4 h-4" />
                  </button>
                  <button className="text-gray-600 hover:text-gray-800" title="Edit">
                    <Edit className="w-4 h-4" />
                  </button>
                  <button className="text-gray-600 hover:text-gray-800" title="Share">
                    <Share2 className="w-4 h-4" />
                  </button>
                  <button className="text-gray-600 hover:text-gray-800" title="More">
                    <MoreVertical className="w-4 h-4" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

// Analytics Tab Component
function AnalyticsTab({ organizationId, reportService }: any) {
  const [stats, setStats] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadStats();
  }, []);

  const loadStats = async () => {
    try {
      // This would call the report statistics function
      setStats({
        total_reports: 25,
        active_reports: 20,
        total_executions: 150,
        avg_execution_time: 2.5,
        most_used_report: 'Invoice Report',
        most_used_template: 'Financial Statement'
      });
    } catch (error) {
      console.error('Error loading stats:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div>
      <h3 className="text-lg font-medium text-gray-900 mb-6">Report Analytics</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <div className="bg-blue-50 rounded-lg p-6">
          <div className="flex items-center">
            <div className="p-2 bg-blue-100 rounded-lg">
              <FileText className="w-6 h-6 text-blue-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-blue-600">Total Reports</p>
              <p className="text-2xl font-bold text-blue-900">{stats?.total_reports}</p>
            </div>
          </div>
        </div>

        <div className="bg-green-50 rounded-lg p-6">
          <div className="flex items-center">
            <div className="p-2 bg-green-100 rounded-lg">
              <BarChart3 className="w-6 h-6 text-green-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-green-600">Total Executions</p>
              <p className="text-2xl font-bold text-green-900">{stats?.total_executions}</p>
            </div>
          </div>
        </div>

        <div className="bg-purple-50 rounded-lg p-6">
          <div className="flex items-center">
            <div className="p-2 bg-purple-100 rounded-lg">
              <Clock className="w-6 h-6 text-purple-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-purple-600">Avg Execution Time</p>
              <p className="text-2xl font-bold text-purple-900">{stats?.avg_execution_time}s</p>
            </div>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-gray-50 rounded-lg p-6">
          <h4 className="text-lg font-medium text-gray-900 mb-4">Most Used Report</h4>
          <div className="flex items-center space-x-3">
            <Star className="w-5 h-5 text-yellow-500" />
            <span className="text-gray-700">{stats?.most_used_report}</span>
          </div>
        </div>

        <div className="bg-gray-50 rounded-lg p-6">
          <h4 className="text-lg font-medium text-gray-900 mb-4">Most Used Template</h4>
          <div className="flex items-center space-x-3">
            <Layout className="w-5 h-5 text-blue-500" />
            <span className="text-gray-700">{stats?.most_used_template}</span>
          </div>
        </div>
      </div>
    </div>
  );
}

// Save Report Modal Component
function SaveReportModal({
  reportName,
  setReportName,
  reportDescription,
  setReportDescription,
  onSave,
  onClose
}: any) {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-xl p-6 w-full max-w-md">
        <h3 className="text-lg font-medium text-gray-900 mb-6">Save Report</h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Report Name
            </label>
            <input
              type="text"
              value={reportName}
              onChange={(e) => setReportName(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter report name"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Description
            </label>
            <textarea
              value={reportDescription}
              onChange={(e) => setReportDescription(e.target.value)}
              rows={3}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter description"
            />
          </div>
        </div>

        <div className="flex items-center justify-end space-x-3 mt-6">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
          >
            Cancel
          </button>
          <button
            onClick={onSave}
            disabled={!reportName.trim()}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Save Report
          </button>
        </div>
      </div>
    </div>
  );
}

// Preview Modal Component
function PreviewModal({ report, onClose }: any) {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-xl p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-medium text-gray-900">Report Preview</h3>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <span className="sr-only">Close</span>
            <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <div className="bg-gray-50 rounded-lg p-8">
          {/* Report Header */}
          <div className="text-center mb-8">
            <h1 className="text-2xl font-bold text-gray-900 mb-2">{report.layout.header.title}</h1>
            <p className="text-gray-600">Generated by AIBOS</p>
          </div>

          {/* Report Table */}
          <div className="bg-white rounded-lg overflow-hidden shadow-sm">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  {report.fields.map((field: ReportField) => (
                    <th key={field.field_name} className="px-4 py-3 text-left text-sm font-medium text-gray-900">
                      {field.label}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                <tr className="hover:bg-gray-50">
                  {report.fields.map((field: ReportField) => (
                    <td key={field.field_name} className="px-4 py-3 text-sm text-gray-900">
                      Sample Data
                    </td>
                  ))}
                </tr>
              </tbody>
            </table>
          </div>

          {/* Report Footer */}
          <div className="text-center mt-8 text-sm text-gray-500">
            {report.layout.footer.text}
          </div>
        </div>
      </div>
    </div>
  );
} 