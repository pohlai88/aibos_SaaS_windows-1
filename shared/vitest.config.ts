import { defineConfig } from 'vitest/config';
import { resolve } from 'path';

export default defineConfig({
  test: {
    globals: true,
    environment: 'node',
    setupFiles: ['./__tests__/setup.ts'],
    coverage: {
      provider: 'v8',
      reporter: ['text', 'lcov', 'html', 'json', 'json-summary'],
      exclude: [
        'node_modules/',
        'dist/',
        'coverage/',
        '**/*.test.ts',
        '**/*.spec.ts',
        '**/__tests__/**',
        '**/__mocks__/**',
        'scripts/',
        'config/',
        'examples/',
        '**/*.d.ts',
        '**/types/**',
        '**/index.ts',
        '**/rollup.config.js',
        '**/vitest.config.ts',
        '**/tsconfig.json',
        '**/package.json',
        '**/README.md',
        '**/.eslintrc*',
        '**/.prettierrc*',
      ],
      thresholds: {
        global: {
          branches: 80,
          functions: 80,
          lines: 80,
          statements: 80,
        },
        './lib/': {
          branches: 85,
          functions: 85,
          lines: 85,
          statements: 85,
        },
        './types/': {
          branches: 90,
          functions: 90,
          lines: 90,
          statements: 90,
        },
      },
      all: true,
    },
    include: ['**/*.test.ts', '**/*.spec.ts', '**/__tests__/**/*.ts'],
    exclude: [
      'node_modules/',
      'dist/',
      'coverage/',
      '**/*.d.ts',
      '**/examples/**',
      '**/scripts/**',
      '**/config/**',
    ],
    testTimeout: 10000,
    hookTimeout: 10000,
    teardownTimeout: 10000,
    pool: 'forks',
    poolOptions: {
      forks: {
        singleFork: true,
      },
    },
    maxConcurrency: 1,
    isolate: true,
    passWithNoTests: true,
    silent: false,
    reporters: ['verbose', 'json'],
    outputFile: {
      json: './coverage/test-results.json',
    },
    onConsoleLog(log, type) {
      if (type === 'stderr') {
        return false;
      }
      return true;
    },
  },
  resolve: {
    alias: {
      '@': resolve(__dirname, './'),
      '@types': resolve(__dirname, './types'),
      '@lib': resolve(__dirname, './lib'),
      '@utils': resolve(__dirname, './utils'),
      '@validation': resolve(__dirname, './validation'),
      '@metadata': resolve(__dirname, './types/metadata'),
      '@config': resolve(__dirname, './config'),
      '@examples': resolve(__dirname, './examples'),
      '@ai': resolve(__dirname, './ai/src'),
      '@cli': resolve(__dirname, './cli/src'),
      '@collaboration': resolve(__dirname, './collaboration/src'),
      '@compliance': resolve(__dirname, './compliance/src'),
      '@debugging': resolve(__dirname, './debugging/src'),
      '@monitoring': resolve(__dirname, './monitoring/src'),
      '@ui-components': resolve(__dirname, './ui-components/src'),
      '@vscode-extension': resolve(__dirname, './vscode-extension/src'),
      '@components': resolve(__dirname, './ui-components/src'),
      '@hooks': resolve(__dirname, './ui-components/src/hooks'),
      '@primitives': resolve(__dirname, './ui-components/src/primitives'),
      '@theme': resolve(__dirname, './ui-components/src/theme'),
      '@analytics': resolve(__dirname, './ui-components/src/analytics'),
      '@data': resolve(__dirname, './ui-components/src/data'),
      '@forms': resolve(__dirname, './ui-components/src/forms'),
      '@layout': resolve(__dirname, './ui-components/src/layout'),
      '@performance': resolve(__dirname, './ui-components/src/performance'),
      '@search': resolve(__dirname, './ui-components/src/search'),
      '@feedback': resolve(__dirname, './ui-components/src/feedback'),
      '@job-queue': resolve(__dirname, './ui-components/src/job-queue'),
    },
  },
});
