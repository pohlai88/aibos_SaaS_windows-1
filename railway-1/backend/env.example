# ==================== AI-BOS BACKEND ENVIRONMENT CONFIGURATION ====================
# Copy this file to .env and fill in your actual values
# For production deployment, set these in your hosting platform's environment variables

# ==================== CORE ENVIRONMENT ====================
NODE_ENV=production
PORT=3001
HOST=0.0.0.0

# ==================== DATABASE CONFIGURATION ====================
# PostgreSQL connection string (required for production)
DATABASE_URL=postgresql://username:password@host:port/database

# ==================== SUPABASE CONFIGURATION ====================
# Supabase project URL (required for AI database features)
SUPABASE_URL=https://your-project.supabase.co
# Supabase anon key (required for client operations)
SUPABASE_KEY=your-supabase-anon-key
# Supabase service role key (required for admin operations)
SUPABASE_SERVICE_ROLE_KEY=your-supabase-service-role-key

# ==================== REDIS CONFIGURATION ====================
# Redis connection URL (optional, for caching and sessions)
REDIS_URL=redis://username:password@host:port

# ==================== JWT CONFIGURATION ====================
# JWT secret key (CHANGE THIS IN PRODUCTION!)
JWT_SECRET=your-super-secure-jwt-secret-key-minimum-32-characters
JWT_EXPIRES_IN=24h

# ==================== CORS CONFIGURATION ====================
# Frontend URL for CORS (required)
FRONTEND_URL=https://your-frontend-domain.com
# Additional allowed origins (comma-separated)
ALLOWED_ORIGINS=https://your-frontend-domain.com,https://admin.your-domain.com

# ==================== RATE LIMITING ====================
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# ==================== SECURITY CONFIGURATION ====================
HELMET_ENABLED=true
COMPRESSION_ENABLED=true

# ==================== MONITORING CONFIGURATION ====================
ENABLE_TELEMETRY=true
ENABLE_METRICS=true

# ==================== DEBUG CONFIGURATION (DEVELOPMENT ONLY) ====================
# Set to false in production
DEBUG=
DEBUG_LEVEL=info
DEBUG_SQL=false
DEBUG_API=false
DEBUG_MEMORY=false
DEBUG_PERFORMANCE=false

# ==================== AI DATABASE DEBUG (DEVELOPMENT ONLY) ====================
DEBUG_AI_DATABASE=false
DEBUG_OLLAMA=false
DEBUG_SCHEMA=false

# ==================== CONSCIOUSNESS ENGINE DEBUG (DEVELOPMENT ONLY) ====================
DEBUG_CONSCIOUSNESS=false
DEBUG_QUANTUM=false

# ==================== WEBSOCKET DEBUG (DEVELOPMENT ONLY) ====================
DEBUG_WEBSOCKET=false
DEBUG_REALTIME=false

# ==================== INSTANCE CONFIGURATION ====================
# Unique identifier for this instance (auto-generated if not set)
INSTANCE_ID=

# ==================== PRODUCTION DEPLOYMENT NOTES ====================
#
# 1. DATABASE SETUP:
#    - Ensure PostgreSQL is running and accessible
#    - Run database migrations before starting the application
#    - Set up proper database backups
#
# 2. SUPABASE SETUP:
#    - Create a Supabase project at https://supabase.com
#    - Enable the required extensions (pgvector, etc.)
#    - Configure RLS policies appropriately
#
# 3. SECURITY:
#    - Change JWT_SECRET to a secure random string
#    - Use HTTPS in production
#    - Configure proper CORS origins
#    - Set up rate limiting appropriate for your use case
#
# 4. MONITORING:
#    - Set up application monitoring (e.g., Sentry, DataDog)
#    - Configure log aggregation
#    - Set up health checks
#
# 5. SCALING:
#    - Consider using a process manager (PM2, Docker)
#    - Set up load balancing if needed
#    - Configure auto-scaling policies
#
# ==================== DEPLOYMENT PLATFORMS ====================
#
# RAILWAY:
#   - Set all environment variables in Railway dashboard
#   - No .env file needed
#
# VERCEL:
#   - Set environment variables in Vercel dashboard
#   - Use Vercel CLI for local testing
#
# HEROKU:
#   - Set environment variables: heroku config:set KEY=value
#   - Or use Heroku dashboard
#
# DOCKER:
#   - Use docker-compose.yml for local development
#   - Set environment variables in docker run command
#
# ==================== HEALTH CHECK ENDPOINTS ====================
#
# The following endpoints are available for health checks:
# - GET /api/health - Basic health check
# - GET /api/system/status - Detailed system status
# - GET /api/database/status - Database connection status
#
# ==================== LOGGING ====================
#
# Logs are written to:
# - Console (stdout/stderr)
# - Files in logs/ directory (if configured)
# - External logging service (if configured)
#
# Log levels: error, warn, info, debug
# Set DEBUG_LEVEL to control verbosity
